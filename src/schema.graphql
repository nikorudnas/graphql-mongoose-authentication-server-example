# Schema model

# Another workaround is to send the _id as string
scalar ObjectID

### Types

# Auth requires token
type AuthPayload {
  token: String!
  user: User
}

# User requires _id
type User {
  _id: ObjectID!
  email: String
  todos: [Todo!]
}

# Input used to validate Create Todo mutation
input CreateTodoInput {
  title: String!
  description: String
  completed: Boolean
}

# Input used to validate Update Todo mutations
input UpdateTodoInput {
  _id: ObjectID!
  title: String!
  description: String
  completed: Boolean
}

# Todo requires _id and title. Optional description and completed
type Todo {
  _id: ObjectID!
  title: String!
  description: String
  completed: Boolean
}

# The query root type, used to define all queries
type Query {
  allTodos: [Todo!]!
  Todo(_id: ObjectID!): Todo!
}

# The mutation root type, used to define all mutations
type Mutation {
  signup(email: String!, password: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  createTodo(todo: CreateTodoInput!): Boolean
  updateTodo(todo: UpdateTodoInput!): Boolean
  deleteTodo(_id: ObjectID!): Boolean
}
